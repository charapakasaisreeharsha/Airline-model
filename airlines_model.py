# -*- coding: utf-8 -*-
"""Airlines_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XdVMV_TryUzwwo3exYhpOTJY1dA4UV4I
"""

import pandas as pd

data = pd.read_csv('/content/customer_booking.csv',encoding="ISO-8859-1")
data.head()

data.info()

data["flight_day"].unique()

mapping = {
    "Mon": 1,
    "Tue": 2,
    "Wed": 3,
    "Thu": 4,
    "Fri": 5,
    "Sat": 6,
    "Sun": 7,
}
data["flight_day"] = data["flight_day"].map(mapping)

data["flight_day"].unique()

data.describe()

data.head()

print(len(data))
print(data.shape)

from sklearn.preprocessing import LabelEncoder
x = data.iloc[:,0:13]
y = data.iloc[:,-1]
ctg_columns = x.select_dtypes(include=['object']).columns
label_col = {}
for col in ctg_columns:
  le = LabelEncoder()
  x[col] = le.fit_transform(x[col])
  label_col[col] = le

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.5,random_state=30)
model = RandomForestClassifier( random_state = 0)
model.fit(x_test,y_test)

pred = model.predict(x_test)
print(pred)
import numpy as np
arr_pred=np.unique(pred,return_counts=True)
print('Values:',arr_pred)

from sklearn.metrics import accuracy_score,precision_score
acc = accuracy_score(y_test,pred)
pre_score = precision_score(y_test,pred)
print('Accuracy = ',acc*100,'%')
print('Precesion score = ',pre_score*100,'%')

import matplotlib.pyplot as plt

# Plot actual vs. predicted values
plt.scatter(y_test,pred)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs. Predicted Values')
plt.show()

residuals = y_test - pred
plt.scatter(pred, residuals)
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.title('Residuals Plot')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns

cm = confusion_matrix(y_test,pred)
sns.heatmap(cm, annot=True, cmap='Blues', fmt='d')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Get feature importances from the trained Random Forest model
feature_importances = model.feature_importances_

# Get feature names
features = x.columns

# Sort feature importances in descending order
indices = np.argsort(feature_importances)[::-1]

# Plot feature importances
plt.figure(figsize=(10, 6))
plt.bar(range(x.shape[1]), feature_importances[indices], align='center')
plt.xticks(range(x.shape[1]), features[indices], rotation=45)
plt.xlabel('Feature')
plt.ylabel('Feature Importance')
plt.title('Feature Importances')

plt.savefig('feature_importances.png', bbox_inches='tight')
plt.show()